name: Chile News Mailer

concurrency:
  group: news-mailer
  cancel-in-progress: false   # no cancela si entran dos ticks en la misma ventana

on:
  schedule:
    - cron: '*/5 * * * *'     # despierta cada 5 minutos (UTC)
  workflow_dispatch: {}

jobs:
  mailer:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Gate: 08:00 y 18:00 Chile con ventana ±35 min, y salida de ventana activa
      - name: Gate by Chile time (±35 min)
        id: gate
        shell: bash
        run: |
          NOW_S=$(TZ=America/Santiago date +%s)
          TODAY=$(TZ=America/Santiago date +%Y-%m-%d)
          HNOW=$(TZ=America/Santiago date +%H:%M:%S)

          T_MORN=$(TZ=America/Santiago date -d "$TODAY 08:00:00" +%s)
          T_EVEN=$(TZ=America/Santiago date -d "$TODAY 18:00:00" +%s)

          WIN=$((35 * 60))  # 35 minutos en segundos

          in_window () { [ "$1" -ge $(( $2 - WIN )) ] && [ "$1" -le $(( $2 + WIN )) ]; }

          RUN="no"
          WINDOW=""
          if [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            RUN="yes"       # los manuales pasan siempre
            WINDOW="manual"
          elif in_window "$NOW_S" "$T_MORN"; then
            RUN="yes"
            WINDOW="morning"
          elif in_window "$NOW_S" "$T_EVEN"; then
            RUN="yes"
            WINDOW="evening"
          fi

          echo "Chile time now: $HNOW (America/Santiago)"
          echo "run=$RUN"       >> "$GITHUB_OUTPUT"
          echo "window=$WINDOW" >> "$GITHUB_OUTPUT"
          echo "date=$TODAY"    >> "$GITHUB_OUTPUT"

      # ===== LOCK: restaurar lock de la ventana activa =====
      - name: Restore lock (morning)
        if: ${{ steps.gate.outputs.run == 'yes' && steps.gate.outputs.window == 'morning' }}
        id: lock_restore_m
        uses: actions/cache/restore@v4
        with:
          path: .cache-lock/morning
          key: mailer-lock-morning-${{ steps.gate.outputs.date }}

      - name: Restore lock (evening)
        if: ${{ steps.gate.outputs.run == 'yes' && steps.gate.outputs.window == 'evening' }}
        id: lock_restore_e
        uses: actions/cache/restore@v4
        with:
          path: .cache-lock/evening
          key: mailer-lock-evening-${{ steps.gate.outputs.date }}

      # Decidir considerando el lock
      - name: Decide with lock
        id: decide
        shell: bash
        run: |
          RUN="${{ steps.gate.outputs.run }}"
          WIN="${{ steps.gate.outputs.window }}"
          HIT_M="${{ steps.lock_restore_m.outputs.cache-hit }}"
          HIT_E="${{ steps.lock_restore_e.outputs.cache-hit }}"
          OK="no"
          if [ "$RUN" = "yes" ]; then
            if [ "$WIN" = "manual" ]; then
              OK="yes"   # manual siempre corre
            elif [ "$WIN" = "morning" ] && [ "$HIT_M" != "true" ]; then
              OK="yes"
            elif [ "$WIN" = "evening" ] && [ "$HIT_E" != "true" ]; then
              OK="yes"
            fi
          fi
          echo "ok=$OK" >> "$GITHUB_OUTPUT"

      # Crear lock y guardarlo de inmediato (para bloquear ticks siguientes de la misma ventana)
      - name: Create lock file (morning)
        if: ${{ steps.decide.outputs.ok == 'yes' && steps.gate.outputs.window == 'morning' }}
        run: |
          mkdir -p .cache-lock/morning
          echo "locked at $(date -u)Z" > .cache-lock/morning/LOCK

      - name: Create lock file (evening)
        if: ${{ steps.decide.outputs.ok == 'yes' && steps.gate.outputs.window == 'evening' }}
        run: |
          mkdir -p .cache-lock/evening
          echo "locked at $(date -u)Z" > .cache-lock/evening/LOCK

      - name: Save lock (morning)
        if: ${{ steps.decide.outputs.ok == 'yes' && steps.gate.outputs.window == 'morning' }}
        uses: actions/cache/save@v4
        with:
          path: .cache-lock/morning
          key: mailer-lock-morning-${{ steps.gate.outputs.date }}

      - name: Save lock (evening)
        if: ${{ steps.decide.outputs.ok == 'yes' && steps.gate.outputs.window == 'evening' }}
        uses: actions/cache/save@v4
        with:
          path: .cache-lock/evening
          key: mailer-lock-evening-${{ steps.gate.outputs.date }}

      # ======= Solo corre si ok == yes =======
      - uses: actions/setup-python@v5
        if: ${{ steps.decide.outputs.ok == 'yes' }}
        with:
          python-version: '3.11'

      - name: Install deps
        if: ${{ steps.decide.outputs.ok == 'yes' }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt, installing minimal deps"
            pip install --no-cache-dir eventregistry openai
          fi

      - name: Run script
        if: ${{ steps.decide.outputs.ok == 'yes' }}
        env:
          ER_API_KEY:     ${{ secrets.ER_API_KEY }}
          REMITENTE:      ${{ secrets.REMITENTE }}
          DESTINATARIO:   ${{ secrets.DESTINATARIO }}
          DESTINATARIO2:  ${{ secrets.DESTINATARIO2 }}
          APP_PASSWORD:   ${{ secrets.APP_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python solo_apis.py

      - name: Skipped (outside window or locked)
        if: ${{ steps.decide.outputs.ok != 'yes' }}
        run: echo "Saltado: fuera de 08:00/18:00 ±35 min o ya hubo un envío en esta ventana."
